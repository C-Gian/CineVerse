@page "/movies/search"

@using CineVerse.client.Components
@using CineVerse.shared.ApiResponses

@if (IsLoading)
{
    <Loader />
}
else
{
    <div class="search-panel">
        <div class="search-box">
            <span class="material-icons search-icon">search</span>
            <input type="text"
                   placeholder="Search for a movie…"
                   @bind-value="_query"
                   @bind-value:event="oninput"
                   @onkeydown="HandleKeyDown" />

            @if (!string.IsNullOrWhiteSpace(_query))
            {
                <button type="button" class="search-clear-btn" @onclick="ClearQuery">✕</button>
            }
        </div>

        <EditForm Model="SearchFiltersModel" OnValidSubmit="HandleSearchAsync" class="search-form">
            <div class="filters-container">

                <!-- GENRES -->
                <TitleWrapperComponent Label="Genres"
                                       TooltipText="Pick one or more genres; the search will match any of the selected genres.">
                    <GenresFilterComponent @bind-Value="SearchFiltersModel.GenresSelection" Genres="Genres" />
                </TitleWrapperComponent>

                <!-- RATING -->
                <TitleWrapperComponent Label="Rating"
                                       TooltipText="Filter by TMDB vote average. Specify the minimum and/or maximum rating (0 to 10).">
                    <RatingFilter @bind-Value="SearchFiltersModel.RatingsSelection" />
                </TitleWrapperComponent> 

                <!-- REGION -->
                <TitleWrapperComponent Label="Region"
                                       TooltipText="Country on which to base the search filters (certification, providers, release dates etc.)">
                    <SingleSelectComponent TItem="CountryApiResponse" TValue="string"
                                           Items="Countries"
                                           TextSelector="c => c.NativeName"
                                           ValueSelector="c => c.Code"
                                           Searchable="true"
                                           @bind-SelectedValue="SearchFiltersModel.Region" />
                </TitleWrapperComponent>

                <!-- RELEASE YEAR FROM -->
                <TitleWrapperComponent Label="Release Year Greater Than"
                                       TooltipText="Include movies released on or after the year you specify (e.g. 2000).">
                    <TextboxComponent InputType="number"
                                      Placeholder="e.g. 2000"
                                      @bind-Value="SearchFiltersModel.ReleaseYearFrom"
                                      Check="v => ValidateYear(v, true)" />
                </TitleWrapperComponent>

                <!-- RELEASE YEAR TO -->
                <TitleWrapperComponent Label="Release Year Lesser Than"
                                       TooltipText="Include movies released on or before the year you specify (e.g. 2024).">
                    <TextboxComponent InputType="number"
                                      Placeholder="e.g. 2025"
                                      @bind-Value="SearchFiltersModel.ReleaseYearTo"
                                      Check="v => ValidateYear(v, false)" />
                </TitleWrapperComponent>

                <!-- CERTIFICATIONS -->
                <TitleWrapperComponent Label="Certifications"
                                       TooltipText="Pick one or more age-ratings (e.g. ‘T’, ‘VM14’) that a movie must carry in the selected country.">
                    <MultiSelectComponent TItem="CertificationApiResponse" TValue="string"
                                          Items="CertificationCountry"
                                          TextSelector="c => c.Certification"
                                          ValueSelector="c => c.Certification"
                                          @bind-SelectedValues="SearchFiltersModel.SelectedCertCodes" />
                </TitleWrapperComponent>

                <!-- STREAMING PROVIDERS -->
                <TitleWrapperComponent Label="Providers"
                                       TooltipText="Show only titles available on the selected streaming services for the chosen watch region.">
                    <MultiSelectComponent TItem="GeneralWatchProvider" TValue="int"
                                          Items="WatchProviders"
                                          TextSelector="p => p.ProviderName"
                                          ValueSelector="p => p.ProviderId"
                                          @bind-SelectedValues="SearchFiltersModel.SelectedProviderIds" />
                </TitleWrapperComponent>

                <!-- ADULT CONTENT -->
                <TitleWrapperComponent Label="Adult Content"
                                       TooltipText="Toggle ON to include titles marked as adult / explicit in the results.">
                    <ToggleSwitch Label="Include Explicit Content"
                                  @bind-Checked="SearchFiltersModel.IncludeAdult" />
                </TitleWrapperComponent>

                <!-- FUTURE FILM INCLUDE -->
                <TitleWrapperComponent Label="Upcoming Movies"
                                       TooltipText="Toggle ON to include titles not released yet.">
                    <ToggleSwitch Label="Include Not Released Movies"
                                  @bind-Checked="SearchFiltersModel.IncludeUpcomingMovies" />
                </TitleWrapperComponent>

                <!-- SORT -->
                <TitleWrapperComponent Label="Sort by"
                                       TooltipText="Choose how the results are ordered (popularity, release date, revenue, etc.).">
                    <SingleSelectComponent TItem="(string Value,string Label)" TValue="string"
                                           Items="AppState.SortOptions"
                                           TextSelector="o => o.Label"
                                           ValueSelector="o => o.Value"
                                           @bind-SelectedValue="SearchFiltersModel.SortBy" />
                </TitleWrapperComponent>
            </div>

            <div class="filters-button-group">
                <button type="button" class="filters-clear-btn" @onclick="ClearSearchFilters">Clear</button>
                <button type="submit" class="filters-search-btn">Search</button>
            </div>
        </EditForm>

    </div>


    @if (Movies.Any())
    {
        <MovieGrid Movies="Movies" PageChanged="LoadMoviesAsync" CurrentPage="SearchFiltersModel.Page" />
    }
    else
    {
        <div class="empty-state">
            <h2>No movies found</h2>
        </div>
    }
}
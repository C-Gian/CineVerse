@typeparam TItem
@using System.Linq
@using CineVerse.client.Services.Interfaces

<div>
	<div class="pagination-controls">

		<button @onclick="FirstPage" disabled="@IsFirstPageDisabled">FirstPage</button>

		<button @onclick="PreviousPage" disabled="@IsPreviousDisabled">Previous</button>

		@foreach (var pageNumber in PageWindow)
		{
			<button @onclick="() => GoToPage(pageNumber)" 
			class="@(CurrentPage == pageNumber ? "active" : "")" 
			disabled="@(CurrentPage == pageNumber)">
				@pageNumber
			</button>
		}

		<button @onclick="NextPage" disabled="@IsNextDisabled">Next</button>

		<button @onclick="LastPage" disabled="@IsLastPageDisabled">Last Page</button>
	</div>

</div>

@code {

	#region Properties

	[Parameter]
	public IEnumerable<TItem> Items { get; set; }

	[Parameter]
	public EventCallback<int> PageChanged { get; set; }

	[Parameter]
	public int CurrentPage { get; set; }

	#endregion

	#region Fields

	private int PageSize { get; set; } = 40;
	private int TotalPages { get; set; } = 500;
	private List<TItem> PaginatedData => Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
	private bool IsFirstPageDisabled => CurrentPage == 1;
	private bool IsPreviousDisabled => CurrentPage == 1;
	private bool IsNextDisabled => CurrentPage == TotalPages;
	private bool IsLastPageDisabled => CurrentPage == TotalPages;
	private const int MaxButtons = 10;
	private int _current => Math.Clamp(CurrentPage, 1, TotalPages);

	#endregion

	private void FirstPage()
	{
		CurrentPage = 1;

		PageChanged.InvokeAsync(CurrentPage);
	}

	private void NextPage()
	{
		if (CurrentPage < TotalPages)
		{
			CurrentPage++;
		}
		PageChanged.InvokeAsync(CurrentPage);
	}

	private void PreviousPage()
	{
		if (CurrentPage > 1)
		{
			CurrentPage--;
		}

		PageChanged.InvokeAsync(CurrentPage);
	}

	private void LastPage()
	{
		CurrentPage = TotalPages;

		PageChanged.InvokeAsync(CurrentPage);
	}

	private void GoToPage(int pageNumber)
	{
		CurrentPage = pageNumber;

		PageChanged.InvokeAsync(pageNumber);
	}

	private IEnumerable<int> PageWindow
	{
		get
		{
			if (TotalPages <= MaxButtons)
				return Enumerable.Range(1, TotalPages);

			int half = MaxButtons / 2;   
			int start = _current - half;       
			int end = _current + half - 1;  

			if (start < 1) { end += 1 - start; start = 1; }
			if (end > TotalPages) { start -= end - TotalPages; end = TotalPages; }

			start = Math.Max(1, start);
			return Enumerable.Range(start, MaxButtons);
		}
	}
}

<style>
	.pagination-controls {
		display: flex;
		align-items: center;
		justify-content: center;
		margin-top: 20px;
	}

		.pagination-controls button {
			background-color: #f8f9fa;
			border: 1px solid #dee2e6;
			color: #007bff;
			padding: 5px 10px;
			margin: 0 5px;
			border-radius: 4px;
			cursor: pointer;
			transition: background-color 0.3s ease, color 0.3s ease;
		}

			.pagination-controls button:hover {
				background-color: #007bff;
				color: white;
			}

			.pagination-controls button.active {
				background-color: #007bff;
				color: white;
				font-weight: bold;
			}

			.pagination-controls button:disabled {
				background-color: #e9ecef;
				color: #6c757d;
				cursor: not-allowed;
				border-color: #ced4da;
			}

		.pagination-controls select {
			margin-right: 15px;
			padding: 5px;
			border-radius: 4px;
			border: 1px solid #dee2e6;
		}

		.pagination-controls label {
			margin-right: 5px;
			font-weight: bold;
		}

		.pagination-controls button.active:disabled {
			background-color: #007bff;
			border-color: #007bff;
			color: #fff;
			opacity: 1; 
			cursor: default;
		}
</style>